%%
headers
#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"
#include <pygtk/pygtk.h>

#include "gedit-plugin.h"
#include "gedit-encodings.h"

void pygedit_register_classes (PyObject *d); 
void pygedit_add_constants (PyObject *module, const gchar *strip_prefix);

static PyObject *
_helper_wrap_gobject_glist (GList *list)
{
    PyObject *py_list;
    GList *tmp;

    if ((py_list = PyList_New(0)) == NULL) {
        return NULL;
    }
    for (tmp = list; tmp != NULL; tmp = tmp->next) {
        PyObject *py_obj = pygobject_new(G_OBJECT(tmp->data));

        if (py_obj == NULL) {
            Py_DECREF(py_list);
            return NULL;
        }
        PyList_Append(py_list, py_obj);
        Py_DECREF(py_obj);
    }
    return py_list;
}

%%
modulename gedit 
%%
import gtk.Widget as PyGtkWidget_Type
import gobject.GObject as PyGObject_Type 
import gtk.VBox as PyGtkVBox_Type
import gtk.Window as PyGtkWindow_Type
import gtksourceview.SourceBuffer as PyGtkSourceBuffer_Type
import gtksourceview.SourceView as PyGtkSourceView_Type
import gtksourceview.SourceLanguage as PyGtkSourceLanguage_Type
%%
ignore-glob
  *_get_type
  gedit_document_error_quark
%%
override gedit_window_get_documents
static PyObject *
_wrap_gedit_window_get_documents(PyGObject *self)
{
    GList *list;
    PyObject *py_list;

    list = gedit_window_get_documents (GEDIT_WINDOW (self->obj));

    py_list = _helper_wrap_gobject_glist (list);

    g_list_free(list);

    return py_list;
}
%%
override gedit_window_get_views
static PyObject *
_wrap_gedit_window_get_views(PyGObject *self)
{
    GList *list;
    PyObject *py_list;

    list = gedit_window_get_views (GEDIT_WINDOW (self->obj));

    py_list = _helper_wrap_gobject_glist (list);

    g_list_free(list);

    return py_list;
}
%%
override gedit_document_get_search_text
static PyObject *
_wrap_gedit_document_get_search_text(PyGObject *self)
{
    PyObject *tuple, *string;
	gint flags = NULL;
	gchar *ret;
	
    ret = gedit_document_get_search_text (GEDIT_DOCUMENT (self->obj), &flags);
    
    tuple = PyTuple_New(2);
	if (ret) {
		string = PyString_FromString(ret);
		PyTuple_SetItem(tuple, 0, string);
		Py_DECREF(string);
	} else {
		PyTuple_SetItem(tuple, 0, Py_None);
	}
	PyTuple_SetItem(tuple, 1, PyInt_FromLong(flags));
	
	g_free(ret);
	
    return tuple;
}
