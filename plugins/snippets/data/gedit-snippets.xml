<?xml version="1.0" ?>
<snippets>
  <language id="C++">
    <snippet>
      <text>int main (int argc, char const* argv[])
{
	$0
	return 0;
}</text>
      <description>main</description>
      <tag>main</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>for (${1:unsigned int} ${2:i} = ${3:0}; ${2:i} &lt; ${4:count}; ${2:i} += ${5:1})
{
	$0
}</text>
      <description>for loop</description>
      <tag>for</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>${1:v}.begin(), ${1:v}.end()</text>
      <description>$1.begin</description>
      <tag>beginend</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>class ${1:name}
{
	public:
		${1:name} (${2:arguments});
		virtual ~${1:name} ();

	private:
		${0:/* data */}
};</text>
      <description>class ..</description>
      <tag>class</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>do
{
	$0
} while ($1 );</text>
      <description>do .. while</description>
      <tag>do</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>#endif
$0</text>
      <accelerator>&lt;Control&gt;&lt;Alt&gt;period</accelerator>
      <description>#endif</description>
      <tag></tag>
    </snippet>
    <snippet>
      <text>if (${1:condition})
{
	$0
}</text>
      <description>if ..</description>
      <tag>if</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>#ifndef __${1:NAME}_H__
#define __$1_H__

$0

#endif /* __$1_H__ */
</text>
      <description>Header Include-Guard</description>
      <tag>once</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>#include &quot;${1:file}&quot;
$0</text>
      <description>#include &quot;..&quot;</description>
      <tag>inc</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>#include &lt;${1:file}&gt;
$0</text>
      <description>#include &lt;..&gt;</description>
      <tag>Inc</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>namespace ${1:ns}
{
	$0
};
</text>
      <description>namespace ..</description>
      <tag>namespace</tag>
      <accelerator></accelerator>
    </snippet>
    
    
    <snippet>
      <text>std::vector&lt;uint8_t&gt; v;
if (FILE* fp = fopen (${1:&quot;filename&quot;}, &quot;r&quot;))
{
	uint8_t buf[1024];
	while (size_t len = fread (buf, 1, sizeof (buf), fp))
		v.insert (v.end(), buf, buf + len);
	fclose(fp);
}
$0</text>
      <description>Read File Into Vector</description>
      <tag>readfile</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>std::map&lt;${1:key}, ${2:value}&gt; ${3:map};
$0</text>
      <description>std::map</description>
      <tag>map</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>std::vector&lt;${1:char}&gt; ${2:v};
$0</text>
      <description>std::vector</description>
      <tag>vector</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>struct ${1:name}
{
	${0:/* data */}
};</text>
      <description>struct ..</description>
      <tag>struct</tag>
      <accelerator></accelerator>
    </snippet>
    <snippet>
      <text>template &lt;typename ${1:_InputIter}&gt;</text>
      <description>template &lt;typename ..&gt;</description>
      <tag>template</tag>
      <accelerator></accelerator>
    </snippet>
  <snippet><text>/*
 * ${1:&lt;filename&gt;}
 * This file is part of ${2:&lt;program name&gt;}
 *
 * Copyright (C) ${3:&lt;year&gt;} - ${4:&lt;name of author&gt;}
 *
 * ${2} is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * ${2} is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, 
 * Boston, MA  02110-1301  USA
 */
 
 $0</text><tag>gpl</tag><description>GPL License</description><accelerator></accelerator></snippet><snippet><text>/*
 * ${1:&lt;filename&gt;}
 * This file is part of ${2:&lt;library name&gt;} 
 *
 * Copyright (C) ${3:&lt;year&gt;} - ${4:&lt;name of author&gt;}
 *
 * ${2} is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * ${2} is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
 
 $0</text><tag>lgpl</tag><description>LGPL License</description><accelerator></accelerator></snippet><snippet><text>typedef ${1:newtype} ${2:type};
$0</text><tag>td</tag><description>typedef</description><accelerator></accelerator></snippet><snippet><text>while ($1)
{
	$0
}</text><tag>while</tag><description>while</description><accelerator></accelerator></snippet></language>
  <language id="HTML">
    <snippet>
      <text>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;
	&quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
</text>
      <description>HTML — 4.01 Strict</description>
      <tag>doctype</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;
	&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;
</text>
      <description>XHTML — 1.0 Frameset</description>
      <tag>doctype</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
	&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
</text>
      <description>XHTML — 1.0 Strict</description>
      <tag>doctype</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;
	&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
</text>
      <description>XHTML — 1.0 Transitional</description>
      <tag>doctype</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot;
	&quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;
</text>
      <description>XHTML — 1.1</description>
      <tag>doctype</tag>
      <accelerator/>
    </snippet>
    
    <snippet>
      <text>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;
</text>
      <description>HTML — 4.0 Transitional</description>
      <tag>doctype</tag>
      <accelerator/>
    </snippet>
    
    <snippet>
      <text>&lt;a href=&quot;${1:http://somesite.com/}&quot;&gt;${2:$GEDIT_SELECTED_TEXT}&lt;/a&gt;
</text>
      <accelerator>&lt;Shift&gt;&lt;Control&gt;l</accelerator>
      <description>Wrap Selection as Link</description>
      <tag>ref</tag>
    </snippet>
    <snippet>
      <text>&lt;${1:p}&gt;$GEDIT_SELECTED_TEXT&lt;/${1}&gt;</text>
      <accelerator>&lt;Shift&gt;&lt;Control&gt;w</accelerator>
      <description>Wrap Selection in Open/Close Tag</description>
      <tag/>
    </snippet>
    <snippet>
      <text>&lt;a href=&quot;mailto:${1:joe@example.com}?subject=${2:feedback}&quot;&gt;${3:email me}&lt;/a&gt; $0</text>
      <description>Mail Anchor</description>
      <tag>mailto</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;base href=&quot;$1&quot; ${2}/&gt;$0</text>
      <description>Base</description>
      <tag>base</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;body id=&quot;${1:ID} &quot; onload=&quot;$2&quot;}&gt;
	$0
&lt;/body&gt;</text>
      <description>Body</description>
      <tag>body</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;br /&gt;
$0</text>
      <accelerator>&lt;Shift&gt;&lt;Control&gt;space</accelerator>
      <description>Br</description>
      <tag/>
    </snippet>
    <snippet>
      <text>&lt;div ${1}&gt;
	${0:$GEDIT_SELECTED_TEXT}
&lt;/div&gt;</text>
      <description>Div</description>
      <tag>div</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;form action=&quot;${1}&quot; method=&quot;${2:get}&quot;&gt;
	$0

	&lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;${3:Continue &amp;rarr;}&quot; /&gt;&lt;/p&gt;
&lt;/form&gt;</text>
      <description>Form</description>
      <tag>form</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;h${1:1} id=&quot;${2}&quot;&gt;${3:$GEDIT_SELECTED_TEXT}&lt;/h${1}&gt;
$0</text>
      <description>Heading</description>
      <tag>h</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;head&gt;
	&lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
	&lt;title&gt;${1:Page Title}&lt;/title&gt;
	$0
&lt;/head&gt;</text>
      <description>Head</description>
      <tag>head</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;input type=&quot;${1:text/submit/hidden/button}&quot; name=&quot;${2:some_name}&quot; value=&quot;$3&quot; id=&quot;${5}&quot; /&gt;</text>
      <description>Input</description>
      <tag>input</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;link rel=&quot;${1:stylesheet}&quot; href=&quot;${2:/css/master.css}&quot; type=&quot;text/css&quot; media=&quot;${3:screen}&quot; title=&quot;${4:no title}&quot; charset=&quot;${5:utf-8}&quot; /&gt;</text>
      <description>Link</description>
      <tag>link</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;meta name=&quot;${1:name}&quot; content=&quot;${2:content}&quot; /&gt;</text>
      <description>Meta</description>
      <tag>meta</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&amp;nbsp;</text>
      <accelerator>&lt;Control&gt;&lt;Alt&gt;space</accelerator>
      <description>Non-Breaking Space</description>
      <tag/>
    </snippet>
    <snippet>
      <text>&lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; charset=&quot;utf-8&quot;&gt;
// &lt;![CDATA[
	$0
// ]]&gt;
&lt;/script&gt;</text>
      <description>Script</description>
      <tag>script</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;script src=&quot;$1&quot; type=&quot;text/javascript&quot; language=&quot;${2:javascript}&quot; charset=&quot;${3:utf-8}&quot; /&gt;</text>
      <description>Script With External Source</description>
      <tag>scriptsrc</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;
/* &lt;![CDATA[ */
	$0
/* ]]&gt; */
&lt;/style&gt;
</text>
      <description>Style</description>
      <tag>style</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;table border=&quot;${1:0}&quot; cellspacing=&quot;${2:0}&quot; cellpadding=&quot;${3:0}&quot;&gt;
	&lt;tr&gt;&lt;th&gt;${4:Header}&lt;/th&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;${5:Data}&lt;/td&gt;&lt;/tr&gt;
	$0
&lt;/table&gt;</text>
      <description>Table</description>
      <tag>table</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;textarea name=&quot;${1:Name}&quot; rows=&quot;${2:8}&quot; cols=&quot;${3:40}&quot;&gt;$0&lt;/textarea&gt;</text>
      <description>Text Area</description>
      <tag>textarea</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;title&gt;${1:Page Title}&lt;/title&gt;</text>
      <description>Title</description>
      <tag>title</tag>
      <accelerator/>
    </snippet>
  <snippet><text>&lt;tr&gt;&lt;td&gt;$1&lt;/td&gt;&lt;/tr&gt;
$0</text><tag>tr</tag><description>Table Row</description><accelerator/></snippet></language>
  <language id="CSS">
    <snippet>
      <text>background-attachment: ${1:scroll/fixed};
$0</text>
      <description>background-attachment: scroll/fixed</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>background-color: #${1:DDD};
$0</text>
      <description>background-color: color-hex</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>background-color: ${1:red};
$0</text>
      <description>background-color: color-name</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>background-color: rgb(${1:255},${2:255},${3:255});
$0</text>
      <description>background-color: color-rgb</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>background: #${1:DDD} url($2) ${3:repeat/repeat-x/repeat-y/no-repeat} ${4:scroll/fixed} ${5:top letft/top center/top right/center left/center center/center right/bottom left/bottom center/bottom right/x-% y-%/x-pos y-pos};
$0</text>
      <description>background: color image repeat attachment position</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>background-color: transparent;
$0</text>
      <description>background-color: transparent</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>background-image: none;
$0</text>
      <description>background-image: none</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>background-image: url($1);
$0</text>
      <description>background-image: url</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>background-position: ${1:top letft/top center/top right/center left/center center/center right/bottom left/bottom center/bottom right/x-% y-%/x-pos y-pos};
$0</text>
      <description>background-position: position</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>background-repeat: ${1:repeat/repeat-x/repeat-y/no-repeat};
$0</text>
      <description>background-repeat: r/r-x/r-y/n-r</description>
      <tag>background</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-bottom-color: #${1:999};
$0</text>
      <description>border-bottom-color: size style color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-bottom: ${1:1}px ${2:solid} #${3:999};
$0</text>
      <description>border-bottom: size style color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-bottom-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};
$0</text>
      <description>border-bottom-style: size style color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-bottom-width: ${1:1}px ${2:solid} #${3:999};
$0</text>
      <description>border-bottom-width: size style color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-color: ${1:999};
$0</text>
      <description>border-color: color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-right-color: #${1:999};
$0</text>
      <description>border-left-color: color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-left: ${1:1}px ${2:solid} #${3:999};
$0</text>
      <description>border-left: size style color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-left-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};
$0</text>
      <description>border-left-style: style</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-left-width: ${1:1}px ${2:solid} #${3:999};
$0</text>
      <description>border-left-width: size</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-right-color: #${1:999};
$0</text>
      <description>border-right-color: color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-right: ${1:1}px ${2:solid} #${3:999};
$0</text>
      <description>border-right: size style color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-right-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};
$0</text>
      <description>border-right-style: style</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-right-width: ${1:1}px ${2:solid} #${3:999};
$0</text>
      <description>border-right-width: size</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border: ${1:1px} ${2:solid} #${3:999};
$0</text>
      <description>border: size style color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};
$0</text>
      <description>border-style: style</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-top-color: #${1:999};
$0</text>
      <description>border-top-color: color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-top: ${1:1}px ${2:solid} #${3:999};
$0</text>
      <description>border-top: size style color</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-top-style: ${1:none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset};
$0</text>
      <description>border-top-style: style</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-top-width: ${1:1}px ${2:solid} #${3:999};
$0</text>
      <description>border-top-width: size</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>border-color: ${1:1px};
$0</text>
      <description>border-width: width</description>
      <tag>border</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>clear: ${1:left/right/both/none};
$0</text>
      <description>clear: value</description>
      <tag>clear</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>color: #${1:DDD};
$0</text>
      <description>color: color-hex</description>
      <tag>color</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>color: ${1:red};
$0</text>
      <description>color: color-name</description>
      <tag>color</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>color: rgb(${1:255},${2:255},${3:255});
$0</text>
      <description>color: color-rgb</description>
      <tag>color</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>cursor: {$1:default/auto/crosshair/pointer/move/*-resize/text/wait/help};
$0</text>
      <description>cursor: type</description>
      <tag>cursor</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>cursor: url($1);
$0</text>
      <description>cursor: url</description>
      <tag>clear</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>direction: ${1:ltr|rtl};
$0</text>
      <description>direction: ltr|rtl</description>
      <tag>direction</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>display: block;
$0</text>
      <description>display: block</description>
      <tag>display</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>display: ${1:none/inline/block/list-item/run-in/compact/marker};
$0</text>
      <description>display: common-types</description>
      <tag>display</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>display: inline;
$0</text>
      <description>display: inline</description>
      <tag>display</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>display: ${1:table/inline-table/table-row-group/table-header-group/table-footer-group/table-row/table-column-group/table-column/table-cell/table-caption};
$0</text>
      <description>display: table-types</description>
      <tag>display</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>float: ${1:left/right/none};
$0</text>
      <description>float: left/right/none</description>
      <tag>float</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>font-family: ${1:Arial, &quot;MS Trebuchet&quot;}, ${2:sans-}serif;
$0</text>
      <description>font-family: family</description>
      <tag>font</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>font: ${1:75%} ${2:&quot;Lucida Grande&quot;, &quot;Trebuchet MS&quot;, Verdana,} ${3:sans-}serif;
$0</text>
      <description>font: size font</description>
      <tag>font</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>font-size: ${1:100%};
$0</text>
      <description>font-size: size</description>
      <tag>font</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>font-style: ${1:normal/italic/oblique};
$0</text>
      <description>font-style: normal/italic/oblique</description>
      <tag>font</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>font: ${1:normal/italic/oblique} ${2:normal/small-caps} ${3:normal/bold} ${4:1em/1.5em} ${5:Arial}, ${6:sans-}serif;
$0</text>
      <description>font: style variant weight size/line-height font-family</description>
      <tag>font</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>font-variant: ${1:normal/small-caps};
$0</text>
      <description>font-variant: normal/small-caps</description>
      <tag>font</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>font-weight: ${1:normal/bold};
$0</text>
      <description>font-weight: weight</description>
      <tag>font</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>letter-spacing: $1em;
$0</text>
      <description>letter-spacing: length-em</description>
      <tag>letter</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>letter-spacing: $1px;
$0</text>
      <description>letter-spacing: length-px</description>
      <tag>letter</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>list-style-image: url($1);
$0</text>
      <description>list-style-image: url</description>
      <tag>list</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>list-style-position: ${1:inside/outside};
$0</text>
      <description>list-style-position: pos</description>
      <tag>list</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>list-style-type: ${1:cjk-ideographic/hiragana/katakana/hiragana-iroha/katakana-iroha};
$0</text>
      <description>list-style-type: asian</description>
      <tag>list</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>list-style-type: ${1:none/disc/circle/square};
$0</text>
      <description>list-style-type: marker</description>
      <tag>list</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>list-style-type: ${1:decimal/decimal-leading-zero/zero};
$0</text>
      <description>list-style-type: numeric</description>
      <tag>list</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>list-style-type: ${1:hebrew/armenian/georgian};
$0</text>
      <description>list-style-type: other</description>
      <tag>list</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>list-style: ${1:none/disc/circle/square/decimal/zero} ${2:inside/outside} url($3);
$0</text>
      <description>list-style: type position image</description>
      <tag>list</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>list-style-type: ${1:lower-roman/uppert-roman/lower-alpha/upper-alpha/lower-greek/lower-latin/upper-latin};
$0</text>
      <description>list-style-type: roman-alpha-greek</description>
      <tag>list</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>margin: ${1:20px};
$0</text>
      <description>margin: all</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>margin-bottom: ${1:20px};
$0</text>
      <description>margin-bottom: length</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>margin-left: ${1:20px};
$0</text>
      <description>margin-left: length</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>margin-right: ${1:20px};
$0</text>
      <description>margin-right: length</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>margin-top: ${1:20px};
$0</text>
      <description>margin-top: length</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>margin: ${1:20px} ${2:0px} ${3:40px} ${4:0px};
$0</text>
      <description>margin: T R B L</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>margin: ${1:20px} ${2:0px};
$0</text>
      <description>margin: V H</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>marker-offset: auto;
$0</text>
      <description>marker-offset: auto</description>
      <tag>marker</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>marker-offset: ${1:10px};
$0</text>
      <description>marker-offset: length</description>
      <tag>marker</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>overflow: ${1:visible/hidden/scroll/auto};
$0</text>
      <description>overflow: type</description>
      <tag>overflow</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>padding: ${1:20px};
$0</text>
      <description>padding: all</description>
      <tag>padding</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>padding-bottom: ${1:20px};
$0</text>
      <description>padding-bottom: length</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>padding-left: ${1:20px};
$0</text>
      <description>padding-left: length</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>padding-right: ${1:20px};
$0</text>
      <description>padding-right: length</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>padding-top: ${1:20px};
$0</text>
      <description>padding-top: length</description>
      <tag>margin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>padding: ${1:20px} ${2:0px} ${3:40px} ${4:0px};
$0</text>
      <description>padding: T R B L</description>
      <tag>padding</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>padding: ${1:20px} ${2:0px};
$0</text>
      <description>padding: V H</description>
      <tag>padding</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>position: ${1:static/relative/absolute/fixed};
$0</text>
      <description>position: type</description>
      <tag>position</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>{
	/* $1 */
	$0
</text>
      <description>properties { }</description>
      <tag>{</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>text-align: ${1:left/right/center/justify};
$0</text>
      <description>text-align: left/center/right</description>
      <tag>text</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>text-decoration: ${1:none/underline/overline/line-through/blink};
$0</text>
      <description>text-decoration: none/underline/overline/line-through/blink</description>
      <tag>text</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>text-indent: ${1:10p}x;
$0</text>
      <description>text-indent: length</description>
      <tag>text</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>text-shadow:  #${1:DDD} ${2:10px} ${3:10px} ${4:2px};
$0</text>
      <description>text-shadow: color-hex x y blur</description>
      <tag>text</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>text-shadow:  rgb(${1:255},${2:255},${3:255}) ${4:10px} ${5:10px} ${6:2px};
$0</text>
      <description>text-shadow: color-rgb x y blur</description>
      <tag>text</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>text-shadow: none;
$0</text>
      <description>text-shadow: none</description>
      <tag>text</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>text-shadow: ${1:capitalize/uppercase/lowercase};
$0</text>
      <description>text-transform: capitalize/upper/lower</description>
      <tag>text</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>text-shadow: none;
$0</text>
      <description>text-transform: none</description>
      <tag>text</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>vertical-align: ${1:baseline/sub/super/top/text-top/middle/bottom/text-bottom/length/%};
$0</text>
      <description>vertical-align: type</description>
      <tag>vertical</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>visibility: ${1:visible/hidden/collapse};
$0</text>
      <description>visibility: type</description>
      <tag>visibility</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>white-space: ${1:normal/pre/nowrap};
$0</text>
      <description>white-space: normal/pre/nowrap</description>
      <tag>white</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>word-spacing: ${1:10px};
$0</text>
      <description>word-spacing: length</description>
      <tag>word</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>word-spacing: normal;
$0</text>
      <description>word-spacing: normal</description>
      <tag>word</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>z-index: $1;
$0</text>
      <description>z-index: index</description>
      <tag>z</tag>
      <accelerator/>
    </snippet>
  </language>
  <language id="Haskell">
    <snippet>
      <text>module ${1:Main} where
	$0</text>
      <description>module</description>
      <tag>mod</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\\${1:t} -&gt; ${1:t}</text>
      <description>\t -&gt; t</description>
      <tag>\</tag>
      <accelerator/>
    </snippet>
  </language>
  <language id="Java">
    
    <snippet>
      <text>private static final ${1:String} ${2:var} = &quot;$0&quot;;</text>
      <description>const def</description>
      <tag>cd</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>if ($1) { // $2

   $0

} else { // $3

   

}

</text>
      <description>if .. else</description>
      <tag>ife</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>if ($1) { // $2
   $0
}</text>
      <description>if</description>
      <tag>if</tag>
      <accelerator/>
    </snippet>
    
    <snippet>
      <text>/** Logger for this class and subclasses. */
protected final Log log = LogFactory.getLog(getClass());
</text>
      <description>logger</description>
      <tag>log</tag>
      <accelerator/>
    </snippet>
    
    
    
    <snippet>
      <text>try {
   $2
} catch (${1:Exception} e) {
   $3
} finally {
   $4
}
$0</text>
      <description>try .. catch .. finally</description>
      <tag>tcf</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>while ($1) { // $2
   $0
}</text>
      <description>while statement</description>
      <tag>while</tag>
      <accelerator/>
    </snippet>
    
    <snippet>
      <text>public static void main(String[] args) {
	${1:System.exit(0)};
}</text>
      <description>main</description>
      <tag>main</tag>
      <accelerator/>
    </snippet>
    
    <snippet>
      <text>System.out.println(&quot;${1}&quot;);
$0	
</text>
      <description>System.out.println</description>
      <tag>sout</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>try {
	$GEDIT_SELECTED_TEXT
} 
catch (Exception e) { 
	${1:e.printStackTrace();}
}
$0</text>
      <accelerator>&lt;Shift&gt;&lt;Control&gt;t</accelerator>
      <description>Wrap Selection in Try/Catch</description>
      <tag/>
    </snippet>
  <snippet><text>try {
   $2
} catch (${1:Exception} e) {
   $3
}
$0</text><tag>tc</tag><description>try .. catch</description><accelerator/></snippet></language>
  <language id="JavaScript">
    <snippet>
      <text>function ${1:function_name} (${2:first_argument})
{
	${0:# body...}
}</text>
      <description>function</description>
      <tag>fun</tag>
      <accelerator/>
    </snippet>
  </language>
  <language id="LaTeX">
    <snippet>
      <text>\\${1:text${2:bf}}{$GEDIT_SELECTED_TEXT}</text>
      <accelerator>&lt;Shift&gt;&lt;Control&gt;w</accelerator>
      <description>Wrap Selection in Command</description>
      <tag/>
    </snippet>
    <snippet>
      <text>\[
	$1
\]</text>
      <description>Displaymath</description>
      <tag>$</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\\item[${1:description}] ${0:item}</text>
      <description>\item[description]</description>
      <tag>itd</tag>
      <accelerator/>
    </snippet>
    
    <snippet>
      <text>\\section{${1:section name}}\\label{${2:label}}
</text>
      <description>Section</description>
      <tag>sec</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\\subsection{${1:subsection name}}\\label{${2:label}}
</text>
      <description>Sub Section</description>
      <tag>sub</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\\subsubsection{${1:subsubsection name}}\\label{${2:label}}
</text>
      <description>Sub Sub Section</description>
      <tag>ssub</tag>
      <accelerator/>
    </snippet>
    
    
  </language>
  <language id="Perl">
    
    <snippet>
      <text>if ($1) {
	${2:# body...}
} else {
	${3:# else...}
}
</text>
      <description>Conditional if..else</description>
      <tag>ife</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>if ($1) {
	${2:# body...}
} elsif ($3) {
	${4:# elsif...}
} else {
	${5:# else...}
}
</text>
      <description>Conditional if..elsif..else</description>
      <tag>ifee</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>${1:expression} unless ${2:condition};
</text>
      <description>Conditional one-line</description>
      <tag>xunless</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>${1:expression} if ${2:condition};
</text>
      <description>Conditional one-line</description>
      <tag>xif</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>eval {
	${1:# do something risky...}
};
if ($@) {
	${2:# handle failure...}
}
</text>
      <description>Try/Except</description>
      <tag>eval</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>foreach ${1:my \$${2:x} }(@${3:array}) {
	${4:# body...}
}
</text>
      <description>Loop</description>
      <tag>fore</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>for (my \$${1:var} = 0; \$$1 &lt; ${2:expression}; \$$1++) {
	${3:# body...}
}
</text>
      <description>Loop</description>
      <tag>for</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>sub ${1:function_name} {
	${2:# body...}
}
</text>
      <description>Function</description>
      <tag>sub</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text> =&gt; </text>
      <accelerator>&lt;Shift&gt;&lt;Control&gt;l</accelerator>
      <description>hash pointer</description>
      <tag/>
    </snippet>
    <snippet>
      <text>if ($1) {
	${2:# body...}
}
</text>
      <description>Conditional</description>
      <tag>if</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>${1:expression} foreach @${2:array};
</text>
      <description>Loop one-line</description>
      <tag>xfore</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>${1:expression} while ${2:condition};
</text>
      <description>Loop one-line</description>
      <tag>xwhile</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>my \$${1:var};
{ local \$/ = undef; local *FILE; open FILE, &quot;&lt;${2:file}&quot;; \$$1 = &lt;FILE&gt;; close FILE }
</text>
      <description>Read File</description>
      <tag>slurp</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>unless ($1) {
	${2:# body...}
}
</text>
      <description>Conditional</description>
      <tag>unless</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>while ($1) {
	${2:# body...}
}
</text>
      <description>Loop</description>
      <tag>while</tag>
      <accelerator/>
    </snippet>
  </language>
  <language id="PHP">
    <snippet>
      <text>#doc
#	classname:	${1:ClassName}
#	scope:		${2:PUBLIC}
#
#/doc

class ${1:ClassName} ${3:extends AnotherClass}
{
	#	internal variables
	
	#	Constructor
	function __construct ( ${4:argument} )
	{
		${0:# code...}
	}
	###	

}
###</text>
      <description>class ..</description>
      <tag>class</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$_COOKIE['${1:variable}']</text>
      <description>COOKIE['..']</description>
      <tag>$</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>do
{
	${0:# code...}
	
} while ( ${1:$a &lt;= 10} );</text>
      <description>do .. while ..</description>
      <tag>do</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>elseif ( ${1:condition} )
{
	${0:# code...}
}</text>
      <description>elseif ..</description>
      <tag>elseif</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>else
{
	${0:# code...}
}</text>
      <description>else ..</description>
      <tag>else</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$_ENV['${1:variable}']</text>
      <description>ENV['..']</description>
      <tag>$</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$_FILES['${1:variable}']</text>
      <description>FILES['..']</description>
      <tag>$</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>foreach( \$${1:variable} as \$${2:key} =&gt; \$${3:value} )
{
	${0:# code...}
}</text>
      <description>foreach ..</description>
      <tag>foreach</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>for ( \$${1:i}=${2:0}; \$${1:i} &lt; $3; \$${1:i}++ )
{ 
	${0:# code...}
}</text>
      <description>for ..</description>
      <tag>for</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>${1:public }function ${2:FunctionName} (${3: \$${4:value}${5:=''} })
{
	${0:# code...}
}</text>
      <description>function ..</description>
      <tag>function</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$_GET['${1:variable}']</text>
      <description>GET['..']</description>
      <tag>$</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}$0</text>
      <description>$GLOBALS['..']</description>
      <tag>globals</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$${1:retVal} = ( ${2:condition} ) ? ${3:a} : ${4:b} ;</text>
      <description>$.. =</description>
      <tag>if?</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>if ( ${1:condition} )
{
	${2:# code...}
}
else
{
	${3:# code...}
}
$0</text>
      <description>if .. else ..</description>
      <tag>ifelse</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>if ( ${1:condition} )
{
	${0:# code...}
}</text>
      <description>if ..</description>
      <tag>if</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>include_once( '${1:file}' );$0</text>
      <description>include_once</description>
      <tag>incl1</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>include( '${1:file}' );$0</text>
      <description>include</description>
      <tag>incl</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$${1:arrayName} = array( '$2'${3:,} );$0</text>
      <description>$.. = array</description>
      <tag>array</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&lt;?php

	$0

?&gt;</text>
      <description>&lt;?php .. ?&gt;</description>
      <tag>php</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$_POST['${1:variable}']</text>
      <description>POST['..']</description>
      <tag>$</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>print &quot;${1:string}&quot;${2: . };$0</text>
      <description>print &quot;..&quot;</description>
      <tag>print</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$_REQUEST['${1:variable}']</text>
      <description>REQUEST['..']</description>
      <tag>$</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>require_once( '${1:file}' );$0</text>
      <description>require_once</description>
      <tag>req1</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>require( '${1:file}' );$0</text>
      <description>require</description>
      <tag>req</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$_SERVER['${1:variable}']</text>
      <description>SERVER['..']</description>
      <tag>$</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>\$_SESSION['${1:variable}']</text>
      <description>SESSION['..']</description>
      <tag>$</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>case '${1:variable}':
	${0:# code...}
break;</text>
      <description>case ..</description>
      <tag>case</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>switch ( ${1:variable} )
{
	case '${2:value}':
		${3:# code...}
	break;
	
	$0
			
	default:
		${4:# code...}
	break;
}</text>
      <description>switch ..</description>
      <tag>switch</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>while ( ${1:$a &lt;= 10} )
{
	${0:# code...}
}</text>
      <description>while ..</description>
      <tag>while</tag>
      <accelerator/>
    </snippet>
  </language>
  <language id="Python">
    <snippet>
      <text>def ${1:fname}(${2:self}):
	${3:pass}</text>
      <description>New Function</description>
      <tag>def</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>def get$1(self): return self._$1</text>
      <description>New Get Method</description>
      <tag>get</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>class ${1:ClassName} (${2:object}):

	def __init__(self${3:,})
		${4:pass}


$0</text>
      <description>New Class</description>
      <tag>class</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>&quot;${1:$GEDIT_SELECTED_TEXT}&quot;</text>
      <accelerator>&lt;Control&gt;2</accelerator>
      <description>Inside String: Insert &quot;…&quot;</description>
      <tag/>
    </snippet>
    <snippet>
      <text>'${1:$GEDIT_SELECTED_TEXT}'</text>
      <accelerator>&lt;Control&gt;apostrophe</accelerator>
      <description>Inside String: Insert '…'</description>
      <tag/>
    </snippet>
    <snippet>
      <text>self.</text>
      <description>self</description>
      <tag>.</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>def set$1(self, ${2:newValue}): self._$1 = $2</text>
      <description>New Set Method</description>
      <tag>set</tag>
      <accelerator/>
    </snippet>
  </language>
  <language id="Ruby">
    <snippet>
      <text>for ${1:element} in ${2:collection}
	${1:element}.$0
end</text>
      <description>for .. in .. end</description>
      <tag>forin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>inject(${1:object}) { |${2:injection}, ${3:element}| $0 }</text>
      <description>inject object</description>
      <tag>inject</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>reject { |${1:element}| ${1:element}.$0 }</text>
      <description>reject element</description>
      <tag>reject</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>select { |${1:element}| ${1:element}.$0 }</text>
      <description>select element</description>
      <tag>select</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>if ${1:condition}
	$2
else
	$3
end</text>
      <description>if .. else .. end</description>
      <tag>ife</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>if ${1:condition}
	$0
end</text>
      <description>if .. end</description>
      <tag>if</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>case ${1:object}
	when ${2:condition}
		$0
end</text>
      <description>case .. end</description>
      <tag>case</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>begin
	$1
rescue ${2:Exception} =&gt; ${3:e}
	$0
end</text>
      <description>begin .. rescue .. end</description>
      <tag>begin</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>class ${1:class_name}
	$0
end</text>
      <description>class .. end</description>
      <tag>class</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>collect do |${1:element}|
	${1:element}.$0
end</text>
      <description>collect element do</description>
      <tag>collecto</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>collect { |${1:element}| ${1:element}.$0 }</text>
      <description>collect element</description>
      <tag>collect</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>def ${1:method_name}
	$0
end</text>
      <description>def .. end</description>
      <tag>def</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>do
	$0
end</text>
      <accelerator/>
      <description>do .. end</description>
      <tag>do</tag>
    </snippet>
    <snippet>
      <text>do |${1:object}|
	$0
end</text>
      <accelerator/>
      <description>do |object| .. end</description>
      <tag>doo</tag>
    </snippet>
    <snippet>
      <text>each do |${1:element}|
	${1:element}.$0
end</text>
      <description>each element do</description>
      <tag>eacho</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>each { |${1:element}| ${1:element}.$0 }</text>
      <description>each element</description>
      <tag>each</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>each_with_index do |${1:element}, ${2:idx}|
	${1:element}.$0
end</text>
      <description>each_with_index do</description>
      <tag>each_with_indexo</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>each_with_index { |${1:element}, ${2:idx}| ${1:element}.$0 }</text>
      <description>each_with_index</description>
      <tag>each_with_index</tag>
      <accelerator/>
    </snippet>
    
    <snippet>
      <text>:${1:key} =&gt; ${2:&quot;value&quot;}${3:, }</text>
      <description>hash pair</description>
      <tag>:</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text> =&gt; </text>
      <accelerator>&lt;Shift&gt;&lt;Control&gt;l</accelerator>
      <description>hash pointer</description>
      <tag/>
    </snippet>
    <snippet>
      <text>inject(${1:object}) do |${2:injection}, ${3:element}| 
	$0
end</text>
      <description>inject object do</description>
      <tag>injecto</tag>
      <accelerator/>
    </snippet>
    
    <snippet>
      <text>reject do |${1:element}| 
	${1:element}.$0
end</text>
      <description>reject element do</description>
      <tag>rejecto</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>select do |${1:element}|
	${1:element}.$0
end</text>
      <description>select element do</description>
      <tag>selecto</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>unless ${1:condition}
	$0
end</text>
      <description>unless</description>
      <tag>unless</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>when ${1:condition}
	$0</text>
      <description>when</description>
      <tag>when</tag>
      <accelerator/>
    </snippet>
  </language>
  <language id="sh">
    <snippet>
      <text>elif [[ ${1:condition} ]]; then
	$0</text>
      <description>elif ..</description>
      <tag>elif</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>for (( ${1:i = 0}; ${2:i &lt; 10}; ${3:i++} )); do
	$0
done</text>
      <description>for .. done</description>
      <tag>for</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>if [[ ${1:condition} ]]; then
	$0
fi</text>
      <description>if .. then</description>
      <tag>if</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>#!/bin/sh
$0</text>
      <description>#!/bin/sh</description>
      <tag>sh</tag>
      <accelerator/>
    </snippet>
    <snippet>
      <text>#!/bin/bash
$0</text>
      <description>#!/bin/bash</description>
      <tag>bash</tag>
      <accelerator/>
    </snippet>
  </language>
  <language id="Tcl">
    <snippet>
      <text>foreach ${1:var} ${2:\$list} {
	${3}
}
</text>
      <description>foreach...</description>
      <tag>foreach</tag>
    <accelerator/></snippet>
    <snippet>
      <text>for {${1:set i 0}} {${2:\$i &lt; \$n}} {${3:incr i}} {
	${4}
}
</text>
      <description>for...</description>
      <tag>for</tag>
    <accelerator/></snippet>
    <snippet>
      <text>if {${1:condition}} {
	${2}
}
</text>
      <description>if...</description>
      <tag>if</tag>
    <accelerator/></snippet>
    <snippet>
      <text>proc ${1:name} {${2:args}} \\
{
	${3}
}
</text>
      <description>proc...</description>
      <tag>proc</tag>
    <accelerator/></snippet>
    <snippet>
      <text>switch ${1:-exact} -- ${2:\$var} {
	${3:match} {
		${4}
	}
	default {${5}}
}
</text>
      <description>switch...</description>
      <tag>switch</tag>
    <accelerator/></snippet>
    <snippet>
      <text>while {${1:condition}} {
	${2}
}
</text>
      <description>while...</description>
      <tag>while</tag>
    <accelerator/></snippet>
  </language>
  <language id="XML">
    <snippet>
      <text>&lt;${1:name} ${2:attr}=&quot;${3:value}&quot;&gt;$0&lt;/${1}&gt;</text>
      <description>Long Attribute Tag</description>
      <tag>&quot;</tag>
    <accelerator/></snippet>
    <snippet>
      <text>&lt;${1:name}&gt;$0&lt;/${1}&gt;

</text>
      <description>Long Tag</description>
      <tag>&lt;</tag>
    <accelerator/></snippet>
    <snippet>
      <text>&lt;${1:name} /&gt;</text>
      <description>Short Tag</description>
      <tag>&gt;</tag>
    <accelerator/></snippet>
  </language>
<language id="IDL"><snippet><text>module ${1:name}
{
	$0
};
</text><tag>mod</tag><description>Module</description><accelerator/></snippet><snippet><text>interface ${1:name}
{
	$0
};
</text><tag>if</tag><description>Interface</description><accelerator/></snippet><snippet><text>struct ${1:name}
{
	$0
};
</text><tag>str</tag><description>Struct</description><accelerator/></snippet><snippet><text>exception ${1:name}
{
	$0
};
</text><tag>exc</tag><description>Exception</description><accelerator/></snippet><snippet><text>sequence&lt;${1:type}&gt; </text><tag>seq</tag><description>Sequence</description><accelerator/></snippet><snippet><text>typedef sequence&lt;${1:type}&gt; ${0:newtype};</text><tag>tseq</tag><description>Typedef Sequence</description><accelerator/></snippet></language><language id="C"><snippet><text>/*
 * ${1:&lt;filename&gt;}
 * This file is part of ${2:&lt;program name&gt;}
 *
 * Copyright (C) ${3:&lt;year&gt;} - ${4:&lt;name of author&gt;}
 *
 * ${2} is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * ${2} is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, 
 * Boston, MA  02110-1301  USA
 */
 
 $0</text><tag>gpl</tag><description>GPL License</description><accelerator></accelerator></snippet><snippet><text>/*
 * ${1:&lt;filename&gt;}
 * This file is part of ${2:&lt;library name&gt;} 
 *
 * Copyright (C) ${3:&lt;year&gt;} - ${4:&lt;name of author&gt;}
 *
 * ${2} is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * ${2} is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
 
 $0</text><tag>lgpl</tag><description>LGPL License</description><accelerator></accelerator></snippet><snippet><text>do
{
	$0
} while ($1);</text><tag>do</tag><description>do .. while</description><accelerator></accelerator></snippet><snippet><text>for (${1:i} = ${2:0}; ${1:i} &lt; ${3:count}; ${1:i} += ${4:1})
{
	$0
}</text><tag>for</tag><description>for loop</description><accelerator></accelerator></snippet><snippet><text>while ($1)
{
	$0
}</text><tag>while</tag><description>while</description><accelerator></accelerator></snippet><snippet><text>#ifndef __${1:NAME}_H__
#define __$1_H__

$0

#endif /* __$1_H__ */
</text><tag>once</tag><description>Header-Include Guard</description><accelerator></accelerator></snippet><snippet><text>if (${1:condition})
{
	$0
}</text><tag>if</tag><description>if</description><accelerator></accelerator></snippet><snippet><text>#include &lt;${1:file}.h&gt;
$0</text><tag>Inc</tag><description>#include &lt;..&gt;</description><accelerator></accelerator></snippet><snippet><text>#include &quot;${1:file}.h&quot;
$0</text><tag>inc</tag><description>#include &quot;..&quot;</description><accelerator></accelerator></snippet><snippet><text>int 
main (int argc, char *argv[])
{
	$0
	return 0;
}</text><tag>main</tag><description>main</description><accelerator></accelerator></snippet><snippet><text>struct ${1:name}
{
	${0:/* data */}
};</text><tag>struct</tag><description>struct</description><accelerator></accelerator></snippet><snippet><text>#endif
$0</text><tag></tag><description>#endif</description><accelerator>&lt;Control&gt;&lt;Alt&gt;period</accelerator></snippet><snippet><text>typedef ${1:newtype} ${2:type};
$0</text><tag>td</tag><description>typedef</description><accelerator></accelerator></snippet></language></snippets>
