#!/bin/bash

pushd $(dirname $(dirname "$0")) > /dev/null
D=$(pwd -P)
popd > /dev/null

BASED="$D/.build"
HOMED="$D/.home"

SOURCED="$HOMED/source"
INSTALLD="$HOMED/.local"

GTK_OSX_BASE_URL="https://git.gnome.org/browse/gtk-osx/plain/"
JHBUILD_SOURCED="$SOURCED/jhbuild"

if [ -z "$GEDIT_SDK" ]; then
	export GEDIT_SDK=10.7
fi

export PATH="$INSTALLD/bin:$PATH"

function do_exit() {
	echo "$1"
	exit 1
}

if [ ! which git &>/dev/null ]; then
	do_exit "You need to have git installed to build gedit for OS X"
fi

if [ ! xcodebuild -version &>/dev/null ]; then
	do_exit "You need to have Xcode installed to build gedit for OS X"
fi

function checkout_jhbuild() {
	#JHBUILD_REVISION=$(curl -ks "$GTK_OSX_BASE_URL/jhbuild-revision")

	#if test x"$JHBUILD_REVISION" = x; then
	#	do_exit "Could not find jhbuild revision to use."
	#fi

	mkdir -p $(dirname "$JHBUILD_SOURCED")

	git clone git://git.gnome.org/jhbuild "$JHBUILD_SOURCED" || do_exit "Failed to clone jhbuild."
	#git --work-tree "$JHBUILD_SOURCED" checkout -b stable $JHBUILD_REVISION || do_exit "Failed to checkout stable jhbuild revision."
}

function build_jhbuild() {
	echo "Building jhbuild..."
	(cd "$JHBUILD_SOURCED" && ./autogen.sh --prefix="$INSTALLD" && make -f Makefile.plain DISABLE_GETTEXT=1 install) >/dev/null || do_exit "Jhbuild installation failed";

	rm -f "$INSTALLD/bin/python2"

	cat << PYTHON2 > "$INSTALLD/bin/python2"
#!/bin/bash

exec /usr/bin/python "\$@"
PYTHON2
	chmod +x "$INSTALLD/bin/python2"
}

function setup_jhbuildrc() {
	echo "Installing jhbuild configuration..."

	mkdir -p "$HOMED"
    curl -ks "$GTK_OSX_BASE_URL/jhbuildrc-gtk-osx" | \
    	sed -e 's/^.*PYTHONPATH.*$//g' -e 's/^.*PYTHON_SITE_PACKAGES.*$//g' > "$HOMED/.jhbuildrc" || do_exit "Failed to get jhbuildrc."

    rm -f "$HOMED/.jhbuildrc-gedit"
    ln -s "$D/config/jhbuildrc-gedit" "$HOMED/.jhbuildrc-gedit" || exit 1
}

function cmd_init() {
	mkdir -p "$SOURCED"

	if [ ! -d "$JHBUILD_SOURCED" ]; then
		checkout_jhbuild
	fi

	build_jhbuild
	setup_jhbuildrc

	rm -f "$BASED/$GEDIT_SDK/source/gedit"
	ln -s $(cd "$D/../../" && pwd) "$BASED/$GEDIT_SDK/source/gedit"
}

function cmd_bootstrap() {
	# Built python once
	cmd_jh bootstrap -q python || exit 1

	# Built python twice! There is a bug where python somehow manages to link
	# its main binary to the system framework library, which then doesn't work...
	# Building python again seems to resolve the issue...
	cmd_jh bootstrap -q -f -t python python || exit 1

	# Bootstrap all the rest
	cmd_jh bootstrap -q || exit 1
}

function cmd_jh() {
	# Setup our jhbuild environment
	export GEDIT_OSX_SOURCE_BASE="$D"
	export GEDIT_OSX_BUILD_BASE="$BASED"
	export __GEDIT_OSX_OLD_HOME="$HOME"
	export HOME="$HOMED"
	export JHB=gedit

	"$INSTALLD/bin/jhbuild" -f "$HOMED/.jhbuildrc" "$@"
}

function cmd_shell() {
	cmd_jh shell
}

function cmd_make() {
	cd "$BASED/$GEDIT_SDK/source/$1" && cmd_jh make
}

function cmd_all() {
	if [ ! -d "$JHBUILD_SOURCED" ]; then
		echo "init..."
		cmd_init || exit 1
	fi

	if [ ! -f "$BASED/$GEDIT_SDK/inst/bin/python" ]; then
		echo "bootstrap"
		cmd_bootstrap || exit 1
	fi

	cmd_jh build -q
}

commands=()

while read line
do
	cmd=${line#declare -f }

	if [[ "$cmd" = cmd_* ]]; then
		commands+=(${cmd#cmd_})
	fi
done < <(declare -F)

cmds=$(printf ", %s" "${commands[@]}")
cmds=${cmds:2}

if [ -z "$1" ]; then
	cmd_all
	exit 0
fi

cmd="cmd_$1"

if [[ $(type -t "$cmd") != "function" ]]; then
	do_exit "Invalid command $1, available commands are: $cmds"
fi

shift 1
"$cmd" "$@"
